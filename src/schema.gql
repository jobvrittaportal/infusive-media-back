# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  access_token: String!
  user: User!
}

type Company {
  address: String
  country_code: String
  createdAt: DateTime!
  email: String
  feid_gsd: String
  id: ID!
  industry_type: String
  name: String!
  phone_country_code: String
  phone_number: String
  postal_code: String
  updatedAt: DateTime!
  website_url: String
}

input CompanyFilterDto {
  address: String
  email: String
  feid_gsd: String
  industry_type: String
  name: String
  phone_number: String
  postal_code: String
}

type ContactPerson {
  email: String
  id: Int!
  name: String!
  phone: String
}

input CreateCompanyDto {
  address: String
  country_code: String
  email: String
  feid_gsd: String
  industry_type: String
  name: String!
  phone_country_code: String
  phone_number: String
  postal_code: String
  website_url: String
}

input CreateRoleInput {
  active: Boolean! = true
  name: String!
  permissions: JSON
}

input CreateUserInput {
  altEmail: String
  altMobile: String
  createdBy: String
  email: String!
  firstName: String!
  lastName: String!
  mobile: String!
  password: String!
  roleIds: [ID!]
  updatedBy: String
  userType: String = "user"
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createCompany(input: CreateCompanyDto!): Company!
  createContactPerson(email: String, name: String!, phone: String): ContactPerson!
  createRole(input: CreateRoleInput!): Role!
  deleteUser(id: ID!): Boolean!
  login(input: LoginInput!): AuthResponse!
  register(input: CreateUserInput!): AuthResponse!
  registerUser(input: CreateUserInput!): User!
  removeCompany(id: Int!): Boolean!
  updateCompany(input: UpdateCompanyDto!): Company!
  updateRole(id: String!, input: UpdateRoleInput!): Role!
  updateUser(id: ID!, input: UpdateUserInput!): User!
}

type PermissionObject {
  delete: Boolean
  read: Boolean
  upsert: Boolean
}

type Query {
  companies(filters: CompanyFilterDto): [Company!]!
  company(id: Int!): Company!
  contactPersons: [ContactPerson!]!
  me: User!
  role(id: String!): Role!
  roles(query: String): [Role!]!
  user(id: ID!): User!
  users: [User!]!
}

type Role {
  active: Boolean!
  id: ID!
  name: String!
  permissions: [RolePermission!]
}

type RolePermission {
  feature: String!
  id: ID!
  permissions: PermissionObject!
}

input UpdateCompanyDto {
  address: String
  country_code: String
  email: String
  feid_gsd: String
  id: Int!
  industry_type: String
  name: String
  phone_country_code: String
  phone_number: String
  postal_code: String
  website_url: String
}

input UpdateRoleInput {
  active: Boolean = true
  id: ID!
  name: String
  permissions: JSON
}

input UpdateUserInput {
  altEmail: String
  altMobile: String
  createdBy: String
  email: String
  firstName: String
  id: ID!
  lastName: String
  mobile: String
  password: String
  roleIds: [ID!]
  updatedBy: String
  userType: String = "user"
}

type User {
  altEmail: String
  altMobile: String
  createdAt: DateTime!
  createdBy: String
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  mobile: String!
  roles: [Role!]
  updatedAt: DateTime!
  updatedBy: String
  userType: String!
}